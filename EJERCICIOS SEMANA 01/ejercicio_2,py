class TorreDeHanoi:
    
    def __init__(self):
        self.pilar_1 = [6, 5, 4, 3, 2, 1]
        self.pilar_2 = []
        self.pilar_3 = []
        pass
        



    def mover_disco(self, pilar_origen, pilar_destino):
       
        if pilar_origen == 1:

            if len(self.pilar_1) != 0:
                

                a = self.pilar_1[-1]

                if pilar_destino == 2:

                    if len(self.pilar_2) == 0:
                        self.pilar_1.pop()
                        self.pilar_2.append(a)
                        print("Succes")

                    elif a > self.pilar_2[-1]:
                        print("No se puede hacer esta operacion!")

                    else:
                        self.pilar_1.pop()
                        self.pilar_2.append(a)
                        print("Succes")
                      
                
                elif pilar_destino == 3:  

                    if len(self.pilar_3) == 0:
                        self.pilar_1.pop()
                        self.pilar_3.append(a)
                        print("Succes")   

                    elif a > self.pilar_3[-1]:
                        print("No se puede hacer esta operacion!")

                    else:
                        self.pilar_1.pop()
                        self.pilar_3.append(a)
                        print("Succes")


            else:
                print("El pilar de origen esta vacio!")  



        if pilar_origen == 2:

            if len(self.pilar_2) != 0:
                

                a = self.pilar_2[-1]

                if pilar_destino == 1:

                    if len(self.pilar_1) == 0:
                        self.pilar_2.pop()
                        self.pilar_1.append(a)
                        print("Succes")

                    elif a > self.pilar_2[-1]:
                        print("No se puede hacer esta operacion!")

                    else:
                        self.pilar_2.pop()
                        self.pilar_1.append(a)
                        print("Succes")
      
                
                elif pilar_destino == 3:  

                    if len(self.pilar_3) == 0:
                        self.pilar_2.pop()
                        self.pilar_3.append(a)
                        print("Succes")   

                    elif a > self.pilar_3[-1]:
                        print("No se puede hacer esta operacion!")

                    else:
                        self.pilar_2.pop()
                        self.pilar_3.append(a)
                        print("Succes")


            else:
                print("El pilar de origen esta vacio!")



        if pilar_origen == 3:

            if len(self.pilar_3) != 0:
                

                a = self.pilar_3[-1]

                if pilar_destino == 1:

                    if len(self.pilar_1) == 0:
                        self.pilar_3.pop()
                        self.pilar_1.append(a)
                        print("Succes")

                    elif a > self.pilar_2[-1]:
                        print("No se puede hacer esta operacion!")

                    else:
                        self.pilar_3.pop()
                        self.pilar_1.append(a)
                        print("Succes")

       
                elif pilar_destino == 2:  

                    if len(self.pilar_2) == 0:
                        self.pilar_3.pop()
                        self.pilar_2.append(a)
                        print("Succes")   

                    elif a > self.pilar_2[-1]:
                        print("No se puede hacer esta operacion!")

                    else:
                        self.pilar_3.pop()
                        self.pilar_2.append(a)
                        print("Succes")

            else:
                print("El pilar de origen esta vacio!")

        
    
        # Recuerda que debes sacar el elemento que está más arriba en el pilar de origen
        # y colocarlo en lo más alto del pilar de destino
        # Sacar el disco
        pass


    
    def __str__(self):
        output = ""
        # Range termina con -1 para recorrer al revés
        for i in range(5, -1, -1):
            fila = " "  # Armamos una fila a la vez, desde arriba
            # Pilar 1
            if len(self.pilar_1) > i:
                fila += str(self.pilar_1[i]) + " "
            else:
                fila += "x "
            # Pilar 2
            if len(self.pilar_2) > i:
                fila += str(self.pilar_2[i]) + " "
            else:
                fila += "x "
            # Pilar 3
            if len(self.pilar_3) > i:
                fila += str(self.pilar_3[i]) + " "
            else:
                fila += "x "
            output += fila + "\n"
        #output += "=" * 7 + "\n"
        return output


prueba = TorreDeHanoi()
print(prueba)
prueba.mover_disco(1,2)
print(prueba)
prueba.mover_disco(1,3)
print(prueba)
prueba.mover_disco(2,3)
print(prueba)
prueba.mover_disco(1,2)
print(prueba)

